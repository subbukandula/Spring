You can define your JobLauncher in some config file and set SimpleAsyncTaskExecutor as task executor 
which will run jobs async (not waiting for one to complete in order to start next one).

@Bean
public JobLauncher jobLauncher() {
    final SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
    jobLauncher.setJobRepository(jobRepository);
    final SimpleAsyncTaskExecutor simpleAsyncTaskExecutor = new SimpleAsyncTaskExecutor();
    jobLauncher.setTaskExecutor(simpleAsyncTaskExecutor);
    return jobLauncher;
 }

// Generic function to split a list into two sublists in Java
public static<T> List[] split(List<T> list)
{
	// create two empty lists
	List<T> first = new ArrayList();
	List<T> second = new ArrayList();

	// get size of the list
	int size = list.size();

	// process each element of the list and add it to the first list
	// or second list based on its position
	for (int i = 0; i < size; i++)
	{
		if (i < (size + 1)/2)
			first.add(list.get(i));
		else
			second.add(list.get(i));
	}

	// return an List array to accommodate both lists
	return new List[] {first, second};
}
